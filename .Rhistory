summary(mod)
mod2 <- lmer(richness ~ CoralAge/Location + (1|Location), data = meta.div)
summary(mod2)
pred <- add_predictions(meta.div[aged,],mod2)
# lmer model residual plot
ggplot(meta.div[aged,],aes(x=CoralAge,y=residuals(mod2))) + geom_point() + geom_hline(yintercept = 0)
ggplot(meta.div[aged,], aes(x=CoralAge,y=richness,color=Location,group=Location)) +
geom_point(alpha=.25) + geom_line(aes(y=pred$pred),size=1) + theme_bw() +
scale_color_manual(values=pal) + ggtitle("Mixed-Effect Model Predictions") +
labs(x="Coral Age (Years)",y="ESV Richness",subtitle = "Points are observed values")
ggsave("./output/figs/lmer_model_predictions_richness_v_age.png",dpi=300, width = 8,height = 10)
library(tidyverse)
# Functions
'%ni%'=Negate("%in%")
# Create variable columns
biotreatment=rep(c("Blank","Bact","Bact+Am","Unfiltered"),each=24,3)
temp=rep(c(15,20,25),each=24*4)
soiltreatment=rep(c("intact","crushed"),each=12,12)
replnumber=rep(1:12,24)
sampleid=paste0("SP-",01:288)
group = rep(letters[1:24],each=12)
dat = as.data.frame(cbind(sampleid,replnumber,biotreatment,temp,soiltreatment,group))
dat
View(dat)
dat$sampleid <- as.character(dat$sampleid)
# Randomly sample 3 replicates for each time point and each group
set.seed(123)
day0 <- dat %>% group_by(group) %>% sample_n(3,replace=FALSE)
day0$day <- 0
dat=dat[dat$sampleid %ni% day0$sampleid,]
day15 <- dat %>% group_by(group) %>% sample_n(3,replace=FALSE)
day15$day <- 15
dat=dat[dat$sampleid %ni% day15$sampleid,]
day30 <- dat %>% group_by(group) %>% sample_n(3,replace=FALSE)
day30$day <- 30
dat=dat[dat$sampleid %ni% day30$sampleid,]
day60 <- dat %>% group_by(group) %>% sample_n(3,replace=FALSE)
day60$day <- 60
dat=dat[dat$sampleid %ni% day60$sampleid,]
# Create new data frame with 'day' column
dat2 = rbind(day0,day15,day30,day60)
dat2 = dat2 %>% arrange(group)
dat2$SampleDate <- "yyyy-mm-dd"
# Write Output
dat2
# --------------------------------------------------------------#
# Porites 16S Analyses - Depends on "01_Process_Raw_Reads.R"
# Author: Geoffrey Zahn
# --------------------------------------------------------------#
# Load packages and functions ####
library(phyloseq)
library(tidyverse)
library(vegan)
library(corrplot)
library(ecodist)
library(ade4)
library(splines)
library(modelr)
library(lme4)
library(patchwork)
# functions
source("./R/plot_bar2.R")
source("./R/summarize_taxa_Joey711.R")
source("./R/heatmap_left.R")
# custom color palette
pal = c("#c4a113","#c1593c","#643d91","#820616","#477887","#688e52",
"#12aa91","#705f36","#8997b2","#753c2b","#3c3e44","#b3bf2d",
"#82b2a4","#894e7d","#a17fc1","#262a8e","#abb5b5","#000000")
# Read cleaned data
ps_ra <- readRDS("./output/phyloseq_cleaned_relabund.RDS")
otu = as.data.frame(as(otu_table(ps_ra),"matrix"))
# --------------------------------------------------------------#
# Porites 16S Analyses - Depends on "01_Process_Raw_Reads.R"
# Author: Geoffrey Zahn
# --------------------------------------------------------------#
# Load packages, functions, and data ####
library(phyloseq)
library(tidyverse)
library(vegan)
library(corrplot)
library(ecodist)
library(ade4)
library(splines)
library(modelr)
library(lme4)
library(patchwork)
# functions
source("./R/plot_bar2.R")
source("./R/summarize_taxa_Joey711.R")
source("./R/heatmap_left.R")
# custom color palette
pal = c("#c4a113","#c1593c","#643d91","#820616","#477887","#688e52",
"#12aa91","#705f36","#8997b2","#753c2b","#3c3e44","#b3bf2d",
"#82b2a4","#894e7d","#a17fc1","#262a8e","#abb5b5","#000000")
# Read cleaned data
ps_ra <- readRDS("./output/phyloseq_cleaned_relabund.RDS")
# convert OTU table to data.frame for easier downstream access
otu = as.data.frame(as(otu_table(ps_ra),"matrix"))
bray = vegdist(otu,method = "bray")
jaccard = vegdist(otu,method = "jaccard", binary = TRUE)
# Non-metric multidimensional scaling ####
bray.nmds <- monoMDS(bray)
stressplot(bray.nmds)
jaccard.nmds <- monoMDS(jaccard)
stressplot(jaccard.nmds)
# Build data frame
bray.x <- bray.nmds$points[,1]
bray.y <- bray.nmds$points[,2]
jaccard.x <- jaccard.nmds$points[,1]
jaccard.y <- jaccard.nmds$points[,2]
nmds <- data.frame(Bray.X = bray.x,Bray.Y=bray.y,Jaccard.X=jaccard.x,Jaccard.Y=jaccard.y)
nmds.df <- (cbind(meta,nmds))
meta = as.data.frame(sample_data(ps_ra))
class(meta)
nmds.df <- (cbind(meta,nmds))
# plot NMDS results
ggplot(nmds.df, aes(x=Bray.X,y=Bray.Y,color=CoralAgeBinned)) +
geom_point()
# Mantel Test ####
spatial.dist = vegdist(cbind(meta$LON, meta$LAT))
mantel.bray = mantel.rtest(spatial.dist, bray, nrepet = 999)
mantel.jaccard = mantel.rtest(spatial.dist, jaccard, nrepet = 999)
plot(mantel.bray)
plot(mantel.jaccard)
# Multiple Regression on distance matrices
dist_MRM <- MRM(bray ~ spatial.dist + dist(meta$CoralAge),  nperm = 999)
dist_MRM
dist_MRM <- MRM(bray ~ spatial.dist,  nperm = 999)
dist_MRM
View(meta)
dist(meta$CoralAge)
dm = dist(meta$CoralAge)
plot(dm)
dist_MRM <- MRM(bray ~ spatial.dist + dist(meta$CoralAge),  nperm = 999)
dist_MRM
dist_MRM <- MRM(bray ~ spatial.dist,  nperm = 999)
dist_MRM
summary(dist_MRM)
plot(dist_MRM)
dist_MRM <- MRM(bray ~ spatial.dist,  nperm = 9999)
dist_MRM
dist(TRRE3)
MRM(dist(TRRE3) ~ dist(sitelocation) + dist(forestpct), data=graze, nperm=100)
dist_MRM <- MRM(jaccard ~ spatial.dist,  nperm = 9999)
dist_MRM
dist_MRM <- MRM(jaccard ~ spatial.dist + dist(meta$CoralAge),  nperm = 9999)
dist_MRM
dist_MRM <- MRM(bray ~ spatial.dist,  nperm = 9999)
print(dist_MRM)
ggplot(meta,aes(x=CoralAge,y=1/simpson)) + geom_point() + geom_smooth(method = "lm")
# --------------------------------------------------------------#
# Porites 16S Analyses - Depends on "01_Process_Raw_Reads.R"
# Author: Geoffrey Zahn
# --------------------------------------------------------------#
# Load packages, functions, and data ####
library(phyloseq)
library(tidyverse)
library(vegan)
library(corrplot)
library(ecodist)
library(ade4)
library(splines)
library(modelr)
library(lme4)
library(patchwork)
# functions
source("./R/plot_bar2.R")
source("./R/summarize_taxa_Joey711.R")
source("./R/heatmap_left.R")
# custom color palette
pal = c("#c4a113","#c1593c","#643d91","#820616","#477887","#688e52",
"#12aa91","#705f36","#8997b2","#753c2b","#3c3e44","#b3bf2d",
"#82b2a4","#894e7d","#a17fc1","#262a8e","#abb5b5","#000000")
# Read cleaned data
ps_ra <- readRDS("./output/phyloseq_cleaned_relabund.RDS")
# convert OTU table and metadata to data.frame for easier downstream access
otu = as.data.frame(as(otu_table(ps_ra),"matrix"))
meta = as.data.frame(sample_data(ps_ra))
# Calculate community distance measures ####
bray = vegdist(otu,method = "bray")
jaccard = vegdist(otu,method = "jaccard", binary = TRUE)
# Non-metric multidimensional scaling ####
bray.nmds <- monoMDS(bray)
stressplot(bray.nmds)
jaccard.nmds <- monoMDS(jaccard)
stressplot(jaccard.nmds)
# Build data frame
bray.x <- bray.nmds$points[,1]
bray.y <- bray.nmds$points[,2]
jaccard.x <- jaccard.nmds$points[,1]
jaccard.y <- jaccard.nmds$points[,2]
nmds <- data.frame(Bray.X = bray.x,Bray.Y=bray.y,Jaccard.X=jaccard.x,Jaccard.Y=jaccard.y)
nmds.df <- (cbind(meta,nmds))
# plot NMDS results
ggplot(nmds.df, aes(x=Bray.X,y=Bray.Y,color=CoralAgeBinned)) +
geom_point()
# Mantel Test ####
spatial.dist = vegdist(cbind(meta$LON, meta$LAT))
mantel.bray = mantel.rtest(spatial.dist, bray, nrepet = 999)
mantel.jaccard = mantel.rtest(spatial.dist, jaccard, nrepet = 999)
plot(mantel.bray)
plot(mantel.jaccard)
# Multiple Regression on distance matrices
dist_MRM <- MRM(bray ~ spatial.dist,  nperm = 9999)
sink("./output/MRM_Table.txt")
print("Bray-Curtis distance regressed against spatial distance:")
print(dist_MRM)
sink(NULL)
library(igraph)
ig=igraph::make_network(ps_ra, max.dist = .9)
library(igraph)
ig=igraph::make_network(ps_ra, max.dist = .9)
ig=make_network(ps_ra, max.dist = .9)
plot_network(ig, physeq = enhalus, color = "Location", shape = "Source",label = NULL)
plot_network(ig, physeq = ps_ra, color = "Location", shape = "Source",label = NULL)
plot_network(ig, physeq = ps_ra, color = "Location", shape = "Coral_Age_Binned",label = NULL)
plot_network(ig, physeq = ps_ra, color = "Location", shape = "CoralAgeBinned",label = NULL)
plot_network(ig, physeq = ps_ra, color = "CoralAgeBinned",label = NULL)
ig=make_network(ps_ra, max.dist = .7)
plot_network(ig, physeq = ps_ra, color = "CoralAgeBinned",label = NULL)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,size=1)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ig=make_network(ps_ra, max.dist = .5)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ig=make_network(ps_ra, max.dist = .9)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ord <- ordinate(ps_ra,method = "DCA")
plot_ordination(ps_ra,ord,color="Location")
ord <- ordinate(ps_ra,method = "PCA")
plot_ordination(ps_ra,ord,color="Location")
?ordinate
ord <- ordinate(ps_ra,method = "PCoA")
plot_ordination(ps_ra,ord,color="Location")
plot_ordination(ps_ra,ord,color="CoralAgeBinned")
dist(meta$CoralAge)
age <- dist(meta$CoralAge)
comm.dist <- dist(otu)
ggplot() + geom_point(aes(x=age,y=comm.dist))
ggplot() + geom_density2d(aes(x=age,y=comm.dist))
ggplot() + geom_point(aes(x=age,y=bray))
ggplot() + geom_point(aes(x=age,y=bray),alpha=.2)
ggplot(mapping=aes(x=age,y=bray)) + geom_point(alpha=.2) + geom_smooth()
ggplot(mapping=aes(x=age,y=bray)) + geom_point(alpha=.2) + geom_smooth(method = "lm")
ggplot(mapping=aes(x=age,y=bray)) + geom_point(alpha=.2) +
geom_smooth(method = "lm") + theme_bw() + labs(x="Coral Age Distance",y="Bray-Curtis Distance")
ggplot(nmds.df, aes(x=Bray.X,y=Bray.Y,color=CoralAgeBinned)) +
geom_point()
plot_ordination(ps_ra,ord,color="CoralAgeBinned")
plot_bar2(ps_ra,fill = "Order")
age_MRM <- MRM(bray ~ age,  nperm = 999)
age_MRM
ps_ra.location <- merge_samples(ps_ra,group = "Location")
ps_ra.location@sam_data$Location
meta$Location
unique(meta$Location)
ps_ra.location@sam_data$Location <- unique(meta$Location)
ps_ra.location@sam_data$CoralAge
meta %>% group_by(Location) %>%
summarise(MeanAge=mean(CoralAge))
?drop_na()
meta %>% group_by(Location) %>% drop_na(CoralAge) %>%
summarise(MeanAge=mean(CoralAge))
meta %>% group_by(Location) %>% drop_na(CoralAge) %>%
summarise(MeanCoralAge=mean(CoralAge))
ps_ra.location@sam_data$CoralAge
ps_ra.location@sam_data$Location
plot_bar2(ps_ra.location,fill = "Phylum")
table(tax_table(ps_ra.location))
names(tax_table(ps_ra.location))
unique(tax_table(ps_ra.location))
ps_ra@tax_table@.Data
ps_ra@tax_table@.Data[,1]
names(ps_ra@tax_table@.Data[,1])
names(ps_ra@tax_table@.Data[1,])
plot_bar2(ps_ra.location,fill = "Class")
plot_bar2(ps_ra.location,fill = "Kingdom")
plot_bar2(ps_ra.location,fill = "Phylum")
ps <- readRDS("./output/phyloseq_object_16S.RDS")
plot(colSums(otu_table(ps)))
summary(colSums(otu_table(ps)))
colSums(otu_table(ps))
colSums(otu_table(ps)) > 1000
sum(colSums(otu_table(ps)) > 1000)
sum(colSums(otu_table(ps)) >= 1000)
keepers <- colSums(otu_table(ps)) >= 1000
otu_table(ps) <- otu_table(ps)[,keepers]
rowSums(otu_table(ps))
plot(rowSums(otu_table(ps)))
rowSums(otu_table(ps)) > 0
rowSums(otu_table(ps)) == 0
sum(rowSums(otu_table(ps)) == 0)
ps.Location <- merge_samples(ps,group = "Location")
# Repair values
ps_ra.location@sam_data$Location <- unique(meta$Location)
ps.location@sam_data$Location <- unique(meta$Location)
ps.Location <- merge_samples(ps,group = "Location")
ps.Location@sam_data$Location <- unique(meta$Location)
transform_sample_counts(ps.Location,fun = function(x) x/sum(x))
ps.Location.ra <- transform_sample_counts(ps.Location,fun = function(x) x/sum(x))
plot_bar2(ps.Location.ra,fill = "Phylum")
plot_bar2(ps.Location.ra,fill = "Phylum") + scale_color_manual(values=pal)
pal
plot_bar2(ps.Location.ra,fill = "Phylum") + scale_fill_manual(values=pal)
plot_bar2(ps.Location.ra,fill = "Phylum") + scale_fill_manual(values=pal[c(1:11,18)])
plot_bar2(ps.Location.ra,fill = "Phylum") + scale_fill_manual(values=pal[c(1:13,18)])
plot_bar2(ps.Location.ra,fill = "Phylum") #+ scale_fill_manual(values=pal[c(1:13,18)])
tax_table(ps.Location.ra)[,2]
tax_table(ps.Location.ra)[2,]
tax_table(ps.Location.ra)[,2] == NA
is.na(tax_table(ps.Location.ra)[,2])
tax_table(ps.Location.ra)[,2][is.na(tax_table(ps.Location.ra)[,2])]
tax_table(ps.Location.ra)[,2][is.na(tax_table(ps.Location.ra)[,2])] <- "Unassigned"
plot_bar2(ps.Location.ra,fill = "Phylum") #+ scale_fill_manual(values=pal[c(1:13,18)])
plot_bar2(ps.Location.ra,fill = "Phylum") + scale_fill_manual(values=pal)
unique(tax_table(ps.Location.ra)[,2])
# Packages
library(phyloseq)
library(tidyverse)
# Load data ####
ps <- readRDS("./output/phyloseq_object_16S.RDS")
# Housekeeping ####
# Rename metadata columns
names(ps@sam_data) <- c("Multiplex ID","Library ID","SampleID","Location","Country","Species","CoralAge","CoralAgeBinned","Average_LE_mm","GPS","Control")
# Add Lat/Lon columns
LAT <- unlist(map(str_split(ps@sam_data$GPS,pattern = " "),1))
LON <- unlist(map(str_split(ps@sam_data$GPS,pattern = " "),2))
LAT <- str_remove(LAT,"N")
LON <- str_remove(LON,"E")
ps@sam_data$LAT <- as.numeric(LAT)
ps@sam_data$LON <- as.numeric(LON)
meta = as.data.frame(sample_data(ps))
# Subset taxa to bacteria only (remove eukaryotes)
table(tax_table(ps)[,1])
ps <- subset_taxa(ps, Kingdom == "Bacteria")
colnames(tax_table(ps)) # No species-level assignments (see previous script)
# remove empty (and singleton) ESVs and Samples
summary(rowSums(otu_table(ps))) # no empty samples
otu_table(ps) <- otu_table(ps)[,colSums(otu_table(ps)) > 1]
# Save raw abundance phyloseq object
saveRDS(ps,"./output/phyloseq_object_16S_cleaned.RDS")
# Normalize with relative abundance
ps_ra <- transform_sample_counts(ps, function(x) x / sum(x) )
saveRDS(ps_ra,"./output/phyloseq_cleaned_relabund.RDS")
ps <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
summary(colSums(otu_table(ps)))
keepers <- colSums(otu_table(ps)) >= 1000
otu_table(ps) <- otu_table(ps)[,keepers]
# Merge samples by location
ps.Location <- merge_samples(ps,group = "Location")
# Repair values
ps.Location@sam_data$Location <- unique(meta$Location)
# Convert to relabund
ps.Location.ra <- transform_sample_counts(ps.Location,fun = function(x) x/sum(x))
# Change NA to "Unassigned"
tax_table(ps.Location.ra)[,2][is.na(tax_table(ps.Location.ra)[,2])] <- "Unassigned"
plot_bar2(ps.Location.ra,fill = "Phylum") + scale_fill_manual(values=pal)
pal = c("#c4a113","#c1593c","#643d91","#820616","#477887","#688e52",
"#12aa91","#705f36","#8997b2","#753c2b","#3c3e44",
"#82b2a4","#894e7d","#a17fc1","#262a8e","#abb5b5","#000000")
plot_bar2(ps.Location.ra,fill = "Phylum") + scale_fill_manual(values=pal)
unique(tax_table(ps.Location.ra)[,2])
ps <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
summary(colSums(otu_table(ps)))
# Drop empty and low-abundance taxa
keepers <- colSums(otu_table(ps)) >= 1000
otu_table(ps) <- otu_table(ps)[,keepers]
# Merge samples by location
ps.Location <- merge_samples(ps,group = "Location")
# Repair values
ps.Location@sam_data$Location <- unique(meta$Location)
# Convert to relabund
ps.Location.ra <- transform_sample_counts(ps.Location,fun = function(x) x/sum(x))
plot_bar2(ps.Location.ra,fill = "Phylum") + scale_fill_manual(values=pal)
tax_table(ps.Location.ra)[,2][is.na(tax_table(ps.Location.ra)[,2])] <- "Unassigned"
plot_bar2(ps.Location.ra,fill = "Phylum") + scale_fill_manual(values=pal)
ps@sam_data$CoralAgeBinned
ps.Age <- merge_samples(ps,group="CoralAgeBinned",fun = unique)
ps.Age
ps.Age@sam_data$CoralAgeBinned
ps.Age <- merge_samples(ps,group="CoralAgeBinned")
unique(ps@sam_data$CoralAgeBinned)
ps@sam_data$CoralAgeBinned <- factor(ps@sam_data$CoralAgeBinned)
levels(ps@sam_data$CoralAgeBinned)
ps.Age <- merge_samples(ps,group="CoralAgeBinned")
levels(ps.Age@sam_data$CoralAgeBinned)
unique(ps.Age@sam_data$CoralAgeBinned)
(ps.Age@sam_data$CoralAgeBinned)
ps <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
summary(colSums(otu_table(ps)))
# Drop empty and low-abundance taxa
keepers <- colSums(otu_table(ps)) >= 1000
otu_table(ps) <- otu_table(ps)[,keepers]
# Merge samples by location
ps.Location <- merge_samples(ps,group = "Location")
# Repair values
ps.Location@sam_data$Location <- unique(meta$Location)
# Merge by Age Class
ps@sam_data$CoralAgeBinned
ps@sam_data$CoralAgeBinned[is.na(ps@sam_data$CoralAgeBinned)]
subset_samples(ps,!is.na(CoralAgeBinned))
ps
ps.ages <- subset_samples(ps,!is.na(CoralAgeBinned))
ps.ages@sam_data$CoralAgeBinned <- factor(ps.ages@sam_data$CoralAgeBinned)
ps.Age <- merge_samples(ps,group="CoralAgeBinned")
(ps.Age@sam_data$CoralAgeBinned)
levels(ps.ages@sam_data$CoralAgeBinned)
ps.ages@sam_data$CoralAgeBinned <- factor(ps.ages@sam_data$CoralAgeBinned,
levels = c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110"))
ps.Age <- merge_samples(ps,group="CoralAgeBinned")
(ps.Age@sam_data$CoralAgeBinned)
levels(ps.ages@sam_data$CoralAgeBinned)
(ps.Age@sam_data$CoralAgeBinned) <- levels(ps.ages@sam_data$CoralAgeBinned)
ps.Age.ra <- transform_sample_counts(ps.Age,fun = function(x) x/sum(x))
ps <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
summary(colSums(otu_table(ps)))
# Drop empty and low-abundance taxa
keepers <- colSums(otu_table(ps)) >= 1000
otu_table(ps) <- otu_table(ps)[,keepers]
# Merge samples by location
ps.Location <- merge_samples(ps,group = "Location")
# Repair values
ps.Location@sam_data$Location <- unique(meta$Location)
# Merge by Age Class
# remove missing coral ages
ps.ages <- subset_samples(ps,!is.na(CoralAgeBinned))
ps.ages@sam_data$CoralAgeBinned <- factor(ps.ages@sam_data$CoralAgeBinned,
levels = c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110"))
ps.Age <- merge_samples(ps,group="CoralAgeBinned")
ps.Age@sam_data$CoralAgeBinned <- levels(ps.ages@sam_data$CoralAgeBinned)
# Convert to relabund
ps.Location.ra <- transform_sample_counts(ps.Location,fun = function(x) x/sum(x))
ps.Age.ra <- transform_sample_counts(ps.Age,fun = function(x) x/sum(x))
tax_table(ps.Location.ra)[,2][is.na(tax_table(ps.Location.ra)[,2])] <- "Unassigned"
tax_table(ps.Age.ra)[,2][is.na(tax_table(ps.Age.ra)[,2])] <- "Unassigned"
plot_bar2(ps.Age.ra,fill = "Phylum") + scale_fill_manual(values=pal)
plot_bar2(ps.Age.ra,fill = "Phylum") + scale_fill_manual(values=pal) +
scale_x_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110"))
plot_bar2(ps.Age.ra,fill = "Phylum") + scale_fill_manual(values=pal) +
scale_x_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110")) + theme_bw()
plot_bar2(ps.Age.ra,fill = "Phylum") + theme_bw() +
scale_fill_manual(values=pal) +
scale_x_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110")) +
labs(x="Age Class",y="Relative Abundance")
plot_bar2(ps.Location.ra,fill = "Phylum") + theme_bw() +
scale_fill_manual(values=pal)
plot_bar2(ps.Location.ra,fill = "Phylum") + theme_bw() +
scale_fill_manual(values=pal) +
labs(x="Relative Abundance",y="Site")
ggsave("./output/figs/Barplot_Phylum_Location.png",height = 10,width = 12,dpi=300)
plot_bar2(ps.Age.ra,fill = "Phylum") + theme_bw() +
scale_fill_manual(values=pal) +
scale_x_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110")) +
labs(x="Age Class",y="Relative Abundance")
ggsave("./output/figs/Barplot_Phylum_AgeClass.png",height = 10,width = 12,dpi=300)
library(ggmap)
library(maps)
ps@sam_data$LAT
ps@sam_data$LON
mean(ps@sam_data$LAT)
mean(ps@sam_data$LON)
ggmap::register_google(key = "AIzaSyDjTK7ZjYKGr1nE5PmaSncAg4g9L913C_o")
ggmap(get_googlemap(center = c(lon = mean(ps@sam_data$LON), lat = mean(ps@sam_data$LAT)),
zoom = 7, scale = 2,
maptype ='satellite')) +
geom_point(aes(x = LON, y = LAT), data = meta, size = 4)
ggmap::register_google(key = "AIzaSyDjTK7ZjYKGr1nE5PmaSncAg4g9L913C_o")
register_google(key = "AIzaSyDjTK7ZjYKGr1nE5PmaSncAg4g9L913C_o")
library(ggmap)
library(maps)
devtools::install_github("dkahle/ggmap")
function (ggmap, extent = "panel", base_layer, maprange = FALSE,
library(ggmap)
library(ggmap)
library(maps)
register_google(key = "AIzaSyDjTK7ZjYKGr1nE5PmaSncAg4g9L913C_o")
devtools::install_github("dkahle/ggmap")
library(ggmap)
register_google(key = "AIzaSyDjTK7ZjYKGr1nE5PmaSncAg4g9L913C_o")
ggmap::register_google(key = "AIzaSyDjTK7ZjYKGr1nE5PmaSncAg4g9L913C_o")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap",force = TRUE)
devtools::install_github("dkahle/ggmap",force = TRUE)
ggmap::register_google(key = "AIzaSyDjTK7ZjYKGr1nE5PmaSncAg4g9L913C_o")
??ggmap
register_google(key = "AIzaSyDjTK7ZjYKGr1nE5PmaSncAg4g9L913C_o")
library(ggmap)
register_google(key = "AIzaSyDjTK7ZjYKGr1nE5PmaSncAg4g9L913C_o")
detach("package:ggmap", unload=TRUE)
library(ggmap)
devtools::install_github("dkahle/ggmap",force = TRUE)
library(ggmap)
devtools::install_github("dkahle/ggmap",force = TRUE)
library(ggmap)
