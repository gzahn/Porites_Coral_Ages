<<<<<<< HEAD
source("./R/comp_transform.R")
source("./R/comp_transform.R")
source("./test_compositional_function.R")
source("./test_compositional_function.R")
source("./test_compositional_function.R")
microbiome::transform()
microbiome::transform
source("./R/comp_transform.R")
pluteus2.rel <- comp_transform(pluteus2, "compositional")
source("./R/comp_transform.R")
pluteus2.rel <- comp_transform(pluteus2, "compositional")
comp_transform <- function (x, transform = "compositional", target = "OTU", shift = 0,
scale = 1)
{
y <- NULL
xorig <- x
if (class(x) == "phyloseq") {
x <- abundances(x)
}
if (!all(sample(round(prod(dim(abundances(x)))/10)))%%1 ==
0) {
warning("The OTU abundances are not integers. \n        Check that the OTU input data is given as original counts \n        to avoid transformation errors!")
}
if (min(sample_sums(otu_table(ps))) == 0) {
warning("At least one sample has no reads...cannot divide by zero!")
}
if (transform == "compositional") {
if (target == "OTU") {
xt <- apply(x, 2, function(x) {
log(x/sum(x) + (1/min(sample_sums(otu_table(ps)))))
})
}
}
}
xret <- xt
if (class(xorig) == "phyloseq") {
if (taxa_are_rows(xorig)) {
otu_table(xorig)@.Data <- xret
}
else {
otu_table(xorig)@.Data <- t(xret)
}
xret <- xorig
}
xret
#<environment: namespace:microbiome>
source("./R/comp_transform.R")
pluteus2.rel <- comp_transform(pluteus2, "compositional")
pluteus2.rel
plot(otu_table(pluteus2.rel))
plot(otu_table(pluteus2.rel)[,1])
otu_table(pluteus2.rel)
(otu_table(pluteus2.rel)[1,1])
(otu_table(ps)[1,1])
sum(otu_table(ps)[1,])
sample_sums(otu_table(ps))
min(sample_sums(otu_table(ps)))
2773/28040 + (1/1392)
log(2773/28040 + (1/1392))
(1/1392)
log(.1)
log10(.1)
log10(2773/28040 + (1/1392))
E(log10(.1))
e(log10(.1))
exp(log10(.1))
log10(.1)
exp(log(.1))
log(.21)
log10(.21)
pacuta2 <- tax_glom(pacuta,taxrank = rank_names(ps)[6])
pluteus2@otu_table[1,1]
log(x/sum(x) + (1/min(sample_sums(otu_table(ps)))))
log10(2773/28040 + (1/1392))
pluteus2.rel <- comp_transform(pluteus2, "clr")
otu_table(pluteus2.rel)[1,1]
install.packages("compositions")
compositions::clr
compositions::clr(otu_table(pluteus2.rel)[,1])
compositions::clr(otu_table(pluteus2.rel)[1,])
compositions::clr(otu_table(pluteus2.rel)[100,])
plot(compositions::clr(otu_table(pluteus2.rel)[100,]))
plot(compositions::clr(otu_table(pluteus2.rel)[1:100,1]))
otu_table(pluteus2.rel)[1:100,1]
otu_table(pluteus2)[1:100,1]
plot(compositions::clr(otu_table(pluteus2)[1:100,1]))
(compositions::clr(otu_table(pluteus2)[1:100,1]))
# --------------------------------------------------------------#
# Porites 16S Analyses - Depends on "01_Process_Raw_Reads.R"
# and "01_Cleanup_Processed_Data.R"
#
# Combine P luteus data with previously published P. acuta
# microbiome data from same sites - Define and investigate
# core bacterial microbiome of both host corals
#
# Author: Geoffrey Zahn
# --------------------------------------------------------------#
# Packages
library(phyloseq)
library(tidyverse)
library(vegan)
# library(devtools) # Load the devtools package
# install_github("microbiome/microbiome") # Install the package
library(microbiome)
library(RColorBrewer)
# functions
source("./R/plot_bar2.R")
# Load data ####
pluteus <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
pacuta <- readRDS("./output/Pacuta_phyloseq_object.Rds")
# fix column names
pacuta@sam_data$Location <- as.character(pacuta@sam_data$Island.Collected.From)
pacuta@sam_data$Library.ID <-  as.character(pacuta@sam_data$SampleName)
# Parse components for merging
pacuta.otu <- otu_table(pacuta)
pacuta.tax <- tax_table(pacuta)
pacuta.sam <- as(sample_data(pacuta), "data.frame")
pluteus.otu <- otu_table(pluteus)
pluteus.tax <- tax_table(pluteus)
pluteus.sam <- as(sample_data(pluteus),"data.frame")
# Merge phyloseq objects ####
ps <- merge_phyloseq(pluteus.otu,sample_data(pluteus.sam),pluteus.tax,pacuta.otu,sample_data(pacuta.sam),pacuta.tax)
# Fix metadata
ps@sam_data$Species[ps@sam_data$Species=="1"] <- "P acuta"
ggplot(mapping=aes(x=1:nrow(otu_table(ps)),y=rowSums(otu_table(ps)))) + geom_point(aes(color=ps@sam_data$Species)) +
labs(x="Sample number",y="Read count",color="Species") + theme_bw()
# Add read count to sampledata
sample_data(ps)$ReadDepth <- rowSums(otu_table(ps))
# Collapse based on taxonomy at genus level ####
ps2 = tax_glom(ps,taxrank = rank_names(ps)[6])
dev.off()
# --------------------------------------------------------------#
# Porites 16S Analyses - Depends on "01_Process_Raw_Reads.R"
# and "01_Cleanup_Processed_Data.R"
#
# Combine P luteus data with previously published P. acuta
# microbiome data from same sites - Define and investigate
# core bacterial microbiome of both host corals
#
# Author: Geoffrey Zahn
# --------------------------------------------------------------#
# Packages
library(phyloseq)
library(tidyverse)
library(vegan)
# library(devtools) # Load the devtools package
# install_github("microbiome/microbiome") # Install the package
library(microbiome)
library(RColorBrewer)
# functions
source("./R/plot_bar2.R")
# Load data ####
pluteus <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
pacuta <- readRDS("./output/Pacuta_phyloseq_object.Rds")
# fix column names
pacuta@sam_data$Location <- as.character(pacuta@sam_data$Island.Collected.From)
pacuta@sam_data$Library.ID <-  as.character(pacuta@sam_data$SampleName)
# Parse components for merging
pacuta.otu <- otu_table(pacuta)
pacuta.tax <- tax_table(pacuta)
pacuta.sam <- as(sample_data(pacuta), "data.frame")
pluteus.otu <- otu_table(pluteus)
pluteus.tax <- tax_table(pluteus)
pluteus.sam <- as(sample_data(pluteus),"data.frame")
# Merge phyloseq objects ####
ps <- merge_phyloseq(pluteus.otu,sample_data(pluteus.sam),pluteus.tax,pacuta.otu,sample_data(pacuta.sam),pacuta.tax)
# Fix metadata
ps@sam_data$Species[ps@sam_data$Species=="1"] <- "P acuta"
ggplot(mapping=aes(x=1:nrow(otu_table(ps)),y=rowSums(otu_table(ps)))) + geom_point(aes(color=ps@sam_data$Species)) +
labs(x="Sample number",y="Read count",color="Species") + theme_bw()
# Add read count to sampledata
sample_data(ps)$ReadDepth <- rowSums(otu_table(ps))
# Collapse based on taxonomy at genus level ####
ps2 = tax_glom(ps,taxrank = rank_names(ps)[6])
?tax_glom
# Remove low-abundance OTUs ####
# Look at taxa sums
summary(taxa_sums(ps2))
# Keep OTUs with at least 10 occurrances
ps.min <- subset_taxa(ps2, taxa_sums(ps2) >= 10)
# Ordination ####
ord1=ordinate(ps.min,method = "NMDS",color="Species")
plot_ordination(ps.min,ord1,color="Species") + stat_ellipse()
ggsave("./output/Pacuta_vs_Plutea_NMDSPlot_draft.png")
mds <- metaMDS(otu_table(ps.min))
stressplot(mds)
plot(nmds$points[,1])
mds1 <- nmds$points[,1]
mds2 <- nmds$points[,2]
ord.df <- data.frame(MDS1=mds1,MDS2=mds2,Location=sample_data(ps.min)$Location,HostSpecies=sample_data(ps.min)$Species)
ggplot(ord.df,aes(x=MDS1,y=MDS2,color=HostSpecies)) + geom_point() + stat_ellipse()
ord1 = ordinate(ps.min, method = "NMDS")
plot_ordination(ps.min,ord1,color="Species")
# Calculate distance matrix
comm.dist <- vegdist(otu_table(ps.min),method = "bray")
plot(comm.dist)
# Convert to presence-absence ####
ps_pa <- transform_sample_counts(ps.min, function(abund) 1*(abund>0))
# prepare data for heatmap and plot ####
pa = as(t(otu_table(ps_pa)),"matrix")
cols = plyr::mapvalues(ps_pa@sam_data$Species,from=unique(ps_pa@sam_data$Species),to=c("Blue","Red"))
heatmap(pa,Rowv = NA,ColSideColors = cols,Colv = NA)
# Blue = P lutea, Red = P acuta
heatmap(t(as.matrix(otu_table(ps_pa))),Rowv = NA,ColSideColors = cols,Colv = NA, labRow = NA, col = gray.colors(2))
# Find genera tha overlap between species of corals ####
Plutea.cols = grep("ABB",x = colnames(pa))
Pacuta.cols = grep("AOO",x = colnames(pa))
Plutea.matrix = pa[,Plutea.cols]
Pacuta.matrix = pa[,Pacuta.cols]
shared.genera = rowSums(Plutea.matrix) > 0 & rowSums(Pacuta.matrix) > 0
shared.genera = which(shared.genera == TRUE)
sink("./output/shared_Genera_Pactua-Plutea.txt")
ps_pa@tax_table[shared.genera,]
sink(NULL)
# Prep shared taxa data frame
shared.genera.names = c(ps_pa@tax_table[shared.genera,"Genus"])
shared.family.names = c(ps_pa@tax_table[shared.genera,"Family"])
shared.order.names = c(ps_pa@tax_table[shared.genera,"Order"])
shared.phylum.names = c(ps_pa@tax_table[shared.genera,"Phylum"])
df.shared.taxa <- data.frame(Genus = shared.genera.names,Family = shared.family.names,Order=shared.order.names,Phylum=shared.phylum.names)
# Bar plot, colored by phylum
ggplot(df.shared.taxa) + geom_bar(aes(x=reorder(Order,Order,function(x)-length(x)),fill=Phylum)) +
theme(axis.text.x = element_text(angle=90),
axis.title = element_text(face="bold")) +
labs(x="Order",y="Shared Count")
ggsave("./output/figs/Shared_Genera_Pacuta-Plutea_within_each-order.png",dpi=300)
# PermANOVA ####
mod1 <- adonis(otu_table(ps) ~ sample_data(ps)$Species + sample_data(ps)$ReadDepth)
mod1
# Core Microbiome(s) ####
pluteus # P. luteus ... this study
pacuta # P. acuta ... previous study
ps # Combined Pluteus and Pacuta
ps2 # combined and taxa merged to genus level
# Let's start with a heatmap of all genera relative abundance in full merged dataset
ps2_ra <- transform_sample_counts(ps2,function(x) x/sum(x))
cols = plyr::mapvalues(ps2@sam_data$Species,from=unique(ps2@sam_data$Species),to=c("Blue","Red"))
# Blue = P luteus, Red = P acuta
heatmap((as.matrix(otu_table(ps2_ra))),Rowv = NA,RowSideColors = cols,Colv = NA, labRow = NA, col = gray.colors(20),labCol = NA)
# ... Not very helpful...try to find the core of each host, then merge
# Compositional versions of the data sets, individually, and combined...
ps2.rel <- microbiome::transform(ps2, "clr")
head(prevalence(pseq.rel, detection = 0.01, sort = TRUE))
ps.rel <- microbiome::transform(ps, "clr")
pluteus.rel <- microbiome::transform(pluteus, "clr")
pacuta.rel <- microbiome::transform(pacuta, "clr")
# tax-glommed to genus level
pluteus2 <- tax_glom(pluteus,taxrank = rank_names(ps)[6])
pluteus2.rel <- comp_transform(pluteus2, "clr")
pacuta2 <- tax_glom(pacuta,taxrank = rank_names(ps)[6])
pacuta2.rel <- microbiome::transform(pacuta2, "clr")
# Examine core thresholds:
prevalences <- seq(.05, .5, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
# Investigate visually
plot_core(ps2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
ggsave("./output/figs/core_lineplot_thresholds_full.png")
plot_core(ps2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
?microbiome::transform
plot_core(ps2.rel, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .1, horizontal = TRUE) +
theme(axis.text.x = element_blank())
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
# --------------------------------------------------------------#
# Porites 16S Analyses - Depends on "01_Process_Raw_Reads.R"
# and "01_Cleanup_Processed_Data.R"
#
# Combine P luteus data with previously published P. acuta
# microbiome data from same sites - Define and investigate
# core bacterial microbiome of both host corals
#
# Author: Geoffrey Zahn
# --------------------------------------------------------------#
# Packages
library(phyloseq)
library(tidyverse)
library(vegan)
# library(devtools) # Load the devtools package
# install_github("microbiome/microbiome") # Install the package
library(microbiome)
library(RColorBrewer)
# functions
source("./R/plot_bar2.R")
# Load data ####
pluteus <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
pacuta <- readRDS("./output/Pacuta_phyloseq_object.Rds")
# fix column names
pacuta@sam_data$Location <- as.character(pacuta@sam_data$Island.Collected.From)
pacuta@sam_data$Library.ID <-  as.character(pacuta@sam_data$SampleName)
# Parse components for merging
pacuta.otu <- otu_table(pacuta)
pacuta.tax <- tax_table(pacuta)
pacuta.sam <- as(sample_data(pacuta), "data.frame")
pluteus.otu <- otu_table(pluteus)
pluteus.tax <- tax_table(pluteus)
pluteus.sam <- as(sample_data(pluteus),"data.frame")
# Merge phyloseq objects ####
ps <- merge_phyloseq(pluteus.otu,sample_data(pluteus.sam),pluteus.tax,pacuta.otu,sample_data(pacuta.sam),pacuta.tax)
# Fix metadata
ps@sam_data$Species[ps@sam_data$Species=="1"] <- "P acuta"
ggplot(mapping=aes(x=1:nrow(otu_table(ps)),y=rowSums(otu_table(ps)))) + geom_point(aes(color=ps@sam_data$Species)) +
labs(x="Sample number",y="Read count",color="Species") + theme_bw()
# Add read count to sampledata
sample_data(ps)$ReadDepth <- rowSums(otu_table(ps))
# Collapse based on taxonomy at genus level ####
ps2 = tax_glom(ps,taxrank = rank_names(ps)[6])
?tax_glom
# Remove low-abundance OTUs ####
# Look at taxa sums
summary(taxa_sums(ps2))
# Keep OTUs with at least 10 occurrances
ps.min <- subset_taxa(ps2, taxa_sums(ps2) >= 10)
# Ordination ####
ord1=ordinate(ps.min,method = "NMDS",color="Species")
plot_ordination(ps.min,ord1,color="Species") + stat_ellipse()
ggsave("./output/Pacuta_vs_Plutea_NMDSPlot_draft.png")
mds <- metaMDS(otu_table(ps.min))
stressplot(mds)
plot(nmds$points[,1])
mds1 <- nmds$points[,1]
mds2 <- nmds$points[,2]
ord.df <- data.frame(MDS1=mds1,MDS2=mds2,Location=sample_data(ps.min)$Location,HostSpecies=sample_data(ps.min)$Species)
ggplot(ord.df,aes(x=MDS1,y=MDS2,color=HostSpecies)) + geom_point() + stat_ellipse()
ord1 = ordinate(ps.min, method = "NMDS")
plot_ordination(ps.min,ord1,color="Species")
# Calculate distance matrix
comm.dist <- vegdist(otu_table(ps.min),method = "bray")
plot(comm.dist)
# Convert to presence-absence ####
ps_pa <- transform_sample_counts(ps.min, function(abund) 1*(abund>0))
# prepare data for heatmap and plot ####
pa = as(t(otu_table(ps_pa)),"matrix")
cols = plyr::mapvalues(ps_pa@sam_data$Species,from=unique(ps_pa@sam_data$Species),to=c("Blue","Red"))
heatmap(pa,Rowv = NA,ColSideColors = cols,Colv = NA)
# Blue = P lutea, Red = P acuta
heatmap(t(as.matrix(otu_table(ps_pa))),Rowv = NA,ColSideColors = cols,Colv = NA, labRow = NA, col = gray.colors(2))
# Find genera tha overlap between species of corals ####
Plutea.cols = grep("ABB",x = colnames(pa))
Pacuta.cols = grep("AOO",x = colnames(pa))
Plutea.matrix = pa[,Plutea.cols]
Pacuta.matrix = pa[,Pacuta.cols]
shared.genera = rowSums(Plutea.matrix) > 0 & rowSums(Pacuta.matrix) > 0
shared.genera = which(shared.genera == TRUE)
sink("./output/shared_Genera_Pactua-Plutea.txt")
ps_pa@tax_table[shared.genera,]
sink(NULL)
# Prep shared taxa data frame
shared.genera.names = c(ps_pa@tax_table[shared.genera,"Genus"])
shared.family.names = c(ps_pa@tax_table[shared.genera,"Family"])
shared.order.names = c(ps_pa@tax_table[shared.genera,"Order"])
shared.phylum.names = c(ps_pa@tax_table[shared.genera,"Phylum"])
df.shared.taxa <- data.frame(Genus = shared.genera.names,Family = shared.family.names,Order=shared.order.names,Phylum=shared.phylum.names)
# Bar plot, colored by phylum
ggplot(df.shared.taxa) + geom_bar(aes(x=reorder(Order,Order,function(x)-length(x)),fill=Phylum)) +
theme(axis.text.x = element_text(angle=90),
axis.title = element_text(face="bold")) +
labs(x="Order",y="Shared Count")
ggsave("./output/figs/Shared_Genera_Pacuta-Plutea_within_each-order.png",dpi=300)
# PermANOVA ####
mod1 <- adonis(otu_table(ps) ~ sample_data(ps)$Species + sample_data(ps)$ReadDepth)
mod1
# Core Microbiome(s) ####
pluteus # P. luteus ... this study
pacuta # P. acuta ... previous study
ps # Combined Pluteus and Pacuta
ps2 # combined and taxa merged to genus level
# Let's start with a heatmap of all genera relative abundance in full merged dataset
ps2_ra <- transform_sample_counts(ps2,function(x) x/sum(x))
cols = plyr::mapvalues(ps2@sam_data$Species,from=unique(ps2@sam_data$Species),to=c("Blue","Red"))
# Blue = P luteus, Red = P acuta
heatmap((as.matrix(otu_table(ps2_ra))),Rowv = NA,RowSideColors = cols,Colv = NA, labRow = NA, col = gray.colors(20),labCol = NA)
# ... Not very helpful...try to find the core of each host, then merge
# Compositional versions of the data sets, individually, and combined...
ps2.rel <- microbiome::transform(ps2, "clr")
head(prevalence(pseq.rel, detection = 0.01, sort = TRUE))
ps.rel <- microbiome::transform(ps, "compositional")
pluteus.rel <- microbiome::transform(pluteus, "compositional")
pacuta.rel <- microbiome::transform(pacuta, "compositional")
# tax-glommed to genus level
pluteus2 <- tax_glom(pluteus,taxrank = rank_names(ps)[6])
pluteus2.rel <- comp_transform(pluteus2, "compositional")
pacuta2 <- tax_glom(pacuta,taxrank = rank_names(ps)[6])
pacuta2.rel <- microbiome::transform(pacuta2, "compositional")
?microbiome::transform
# Examine core thresholds:
prevalences <- seq(.05, .5, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
# Investigate visually
plot_core(ps2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
ggsave("./output/figs/core_lineplot_thresholds_full.png")
plot_core(ps2.rel, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .1, horizontal = TRUE) +
theme(axis.text.x = element_blank())
ggsave("./output/figs/core_heatmap_thresholds_full.png", dpi=300)
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
source("./R/comp_transform.R")
pacuta2.rel <- comp_transform(pacuta2)
source("./R/comp_transform.R")
pacuta2.rel <- comp_transform(pacuta2)
prevalences <- seq(.05, .5, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
otu_table(pacuta2.rel)[,1]
plot(as.vector(otu_table(pacuta2.rel))
)
prevalences <- seq(.05, 8, .5)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
seq(.05, 8, .5)
detections
log10(.2)
10^seq(log10(1e-3)
)
seq(log10(1e-3), log10(.2), length = 10)
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "heatmap") + xlab("Relative Abundance (%)")
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "heatmap") + xlab("Relative Abundance (%)") +
theme(axis.text = element_blank())
ls
grep()
grep
?read.csv()
test1 <- c(1:5, "6,7", "8,9,10")
tf <- tempfile()
writeLines(test1, tf)
?help.doesn;texist
?help.doesntexist
read.csv()
?read.csv()
A = 3
2+       A
path <- "~/Desktop/Old_Stuff/Postdoc/Arabidopsis/Sequences/raw_fastqs/"
list.files(path)
# Parse fwd and rev reads
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
# Get Sample Names
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
plotQualityProfile(fnFs[c(1,2)]) # fwd reads
# -------------------------------------------------------------------#
# Porites 16S Analyses - Create phyloseq object from raw 16S reads
#
# Author: Geoffrey Zahn
# -------------------------------------------------------------------#
# Process Raw 16S reads ####
# Load packages ####
library(dada2); packageVersion("dada2")
library(vegan)
library(tidyverse)
library(phyloseq)
library(decontam)
# Find raw fastq files and prepare workspace ####
path <- "~/Desktop/Old_Stuff/Postdoc/Arabidopsis/Sequences/raw_fastqs/"
list.files(path)
# Parse fwd and rev reads
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
# Get Sample Names
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[c(1,2)]) # fwd reads
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
a = Sys.time()
a
elapsed = difftime(a,Sys.time())
elapsed
elapsed = difftime(Sys.time(),a)
elapsed
a = Sys.time()
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(260,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
# -------------------------------------------------------------------#
# Porites 16S Analyses - Create phyloseq object from raw 16S reads
#
# Author: Geoffrey Zahn
# -------------------------------------------------------------------#
# Process Raw 16S reads ####
# Load packages ####
library(dada2); packageVersion("dada2")
library(vegan)
library(tidyverse)
library(phyloseq)
library(decontam)
# Find raw fastq files and prepare workspace ####
path <- "~/Desktop/Old_Stuff/Postdoc/Arabidopsis/Sequences/raw_fastqs"
list.files(path)
# Parse fwd and rev reads
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
# Get Sample Names
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
# Peek at quality profiles
plotQualityProfile(fnFs[c(1,2)]) # fwd reads
plotQualityProfile(fnRs[c(1,2)]) # rev reads
# Make filtered outfile names
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
# Filter and trim ####
# cut fwd reads at 260 and rev reads at 200
a = Sys.time()
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(260,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
elapsed = difftime(Sys.time(),a)
elapsed
=======
mod1$effects
coef(mod1)
coef(summary(mod1))
coef(summary(mod1))[,4]
coef(summary(mod1))[2,4]
print(paste0("This is significant (P = ", coef(summary(mod1))[2,4])
print(paste0("This is significant (P = ", coef(summary(mod1))[2,4]))
paste0("This is significant (P = ", coef(summary(mod1))[2,4])
paste0("This is significant (P = ", signif(coef(summary(mod1))[2,4],4),")")
paste0("This is significant (P = ", signif(coef(summary(mod1))[2,4],4),"), but weak (R-sq = ",signif(rsq(mod1),4))
paste0("This is significant (P = ", signif(coef(summary(mod1))[2,4],4),"), but weak (R-sq = ",signif(rsq(mod1),4),")")
sink("./output/Age_Distance_vs_Community_Distance_GLM-Table.txt")
print("Bacterial community dissimilarity as a function of coral age distance...")
summary(mod1)
print("Corals of more similar ages have more similar bacterial communities.")
paste0("This is significant (P = ", signif(coef(summary(mod1))[2,4],4),"), but weak (R-sq = ",signif(rsq(mod1),4),")")
sink(NULL)
sink("./output/Age_Distance_vs_Community_Distance_GLM-Table.txt")
print("Bacterial community dissimilarity as a function of coral age distance...")
summary(mod1)
print("Corals of more similar ages have more similar bacterial communities.")
paste0("This is a significant (P = ", signif(coef(summary(mod1))[2,4],4),"), but weak (R-sq = ",signif(rsq(mod1),4),") relationship.")
sink(NULL)
# write results to file
sink("./output/Age_Distance_vs_Community_Distance_GLM-Table.txt")
print("Bacterial community dissimilarity as a function of coral age distance...")
summary(mod1)
print("Corals of more similar ages have more similar bacterial communities.")
paste0("This is a significant (P = ", signif(coef(summary(mod1))[2,4],4),"), but weak (R-sq = ",signif(rsq(mod1),4),") relationship.")
print("See Coral_Age_Dist_vs_Community_Dist_Plot.png")
sink(NULL)
ggplot(mapping=aes(x=age,y=bray)) + geom_point(alpha=.2) +
geom_smooth(method = "lm") + theme_bw() + labs(x="Coral Age Distance",y="Bray-Curtis Distance")
ggplot(mapping=aes(x=age,y=bray)) + geom_point(alpha=.2) +
geom_smooth(method = "lm") + theme_bw() + labs(x="Coral Age Distance (Years)",y="Bray-Curtis Distance")
ggsave("See Coral_Age_Dist_vs_Community_Dist_Plot.png",dpi=300)
# --------------------------------------------------------------#
# Porites 16S Analyses - Beta diversity and community structure
#
# Depends on "01_Process_Raw_Reads.R"
#
# Author: Geoffrey Zahn
# --------------------------------------------------------------#
# Load packages, functions, and data ####
library(phyloseq)
library(tidyverse)
library(vegan)
library(corrplot)
library(ecodist)
library(ade4)
library(splines)
library(modelr)
library(lme4)
library(patchwork)
library(igraph)
library(rsq)
# functions
source("./R/plot_bar2.R")
source("./R/summarize_taxa_Joey711.R")
source("./R/heatmap_left.R")
# custom color palette
pal = c("#c4a113","#c1593c","#643d91","#820616","#477887","#688e52",
"#12aa91","#705f36","#8997b2","#753c2b","#3c3e44","#b3bf2d",
"#82b2a4","#894e7d","#a17fc1","#262a8e","#abb5b5","#000000")
# Read cleaned data
ps_ra <- readRDS("./output/phyloseq_cleaned_relabund.RDS")
# convert OTU table and metadata to data.frame for easier downstream access
otu = as.data.frame(as(otu_table(ps_ra),"matrix"))
meta = as.data.frame(sample_data(ps_ra))
# Calculate community distance measures ####
bray = vegdist(otu,method = "bray")
jaccard = vegdist(otu,method = "jaccard", binary = TRUE)
# Plot community dist vs age dist ####
age <- dist(meta$CoralAge)
ggplot(mapping=aes(x=age,y=bray)) + geom_point(alpha=.2) +
geom_smooth(method = "lm") + theme_bw() + labs(x="Coral Age Distance (Years)",y="Bray-Curtis Distance")
ggsave("See Coral_Age_Dist_vs_Community_Dist_Plot.png",dpi=300)
# Quick glm model
mod1 = glm(bray~age)
# write results to file
sink("./output/Age_Distance_vs_Community_Distance_GLM-Table.txt")
print("Bacterial community dissimilarity as a function of coral age distance...")
summary(mod1)
print("Corals of more similar ages have more similar bacterial communities.")
paste0("This is a significant (P = ", signif(coef(summary(mod1))[2,4],4),"), but weak (R-sq = ",signif(rsq(mod1),4),") relationship.")
print("See Coral_Age_Dist_vs_Community_Dist_Plot.png")
sink(NULL)
# Mantel Test ####
spatial.dist = vegdist(cbind(meta$LON, meta$LAT))
mantel.bray = mantel.rtest(spatial.dist, bray, nrepet = 999)
mantel.jaccard = mantel.rtest(spatial.dist, jaccard, nrepet = 999)
sink("./output/Mantel_Test.txt")
mantel.bray
sink(NULL)
plot(mantel.bray)
plot(mantel.jaccard)
# Multiple Regression on distance matrices ####
dist_MRM <- MRM(bray ~ spatial.dist,  nperm = 9999)
age_MRM <- MRM(bray ~ age,  nperm = 999)
sink("./output/MRM_Table.txt")
print("Bray-Curtis distance regressed against spatial distance:")
print(dist_MRM)
sink(NULL)
print(dist_MRM)
sink("./output/MRM_Table.txt")
print("Bray-Curtis distance regressed against spatial distance (Multiple regression on matrices):")
print(dist_MRM)
print("Geographic distance is positively associated with bacterial community distance.")
sink(NULL)
print(dist_MRM)
ord <- ordinate(ps_ra,method = "PCoA")
plot_ordination(ps_ra,ord,color="CoralAgeBinned")
subset_samples(ps_ra,CoralAgeBinned != NA)
subset_samples(ps_ra,"CoralAgeBinned" != NA)
ps_ra@sam_data$CoralAgeBinned
subset_samples(ps_ra,"CoralAgeBinned" != "NA")
ps_ra
subset_samples(ps_ra,!is.na(ps_ra@sam_data$CoralAgeBinned))
# Subset ps_ra to only samples with defined coral ages...may need to re-load fresh RDS later
ps_ra <- subset_samples(ps_ra,!is.na(ps_ra@sam_data$CoralAgeBinned))
ord <- ordinate(ps_ra,method = "PCoA")
plot_ordination(ps_ra,ord,color="CoralAgeBinned")
plot_ordination(ps_ra,ord,color="CoralAgeBinned") +
scale_color_manual(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110"))
plot_ordination(ps_ra,ord,color="CoralAgeBinned") +
scale_color_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110"))
plot_ordination(ps_ra,ord,color="CoralAgeBinned") +
scale_color_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110")) +
scale_color_manual(values=pal)
plot_ordination(ps_ra,ord,color="CoralAgeBinned") +
scale_color_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110")) +
scale_color_manual(values=pal) + theme_bw()
plot_ordination(ps_ra,ord,color="CoralAgeBinned",size=4) +
scale_color_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110")) +
scale_color_manual(values=pal) + theme_bw()
plot_ordination(ps_ra,ord,color="CoralAgeBinned") +
scale_color_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110")) +
scale_color_manual(values=pal) + theme_bw()
plot_ordination(ps_ra,ord,color="CoralAgeBinned") +
scale_color_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110")) +
theme_bw()
plot_ordination(ps_ra,ord,color="CoralAgeBinned") +
scale_color_discrete(limits=c("10 to 20","21 to 30","31 to 40",
"41 to 50","51 to 60","61 to 70",
"81 to 90","82 to 90","91 to 100",
"101 to 110")) +
theme_bw() + labs(color="Coral age group")
ggsave("./output/figs/PCoA_CoralAgeGroups.png",dpi=300,height = 8,width = 8)
growthrate <- cut(meta$Average_LE_mm, breaks = 3)
growthrate <- plyr::mapvalues(growthrate,from = levels(growthrate), to=c("Low","Med","High"))
ps_ra@sam_data$GrowthRateCat <- growthrate
ps_ra <- readRDS("./output/phyloseq_cleaned_relabund.RDS")
growthrate <- cut(meta$Average_LE_mm, breaks = 3)
growthrate <- plyr::mapvalues(growthrate,from = levels(growthrate), to=c("Low","Med","High"))
ps_ra@sam_data$GrowthRateCat <- growthrate
plot_ordination(ps_ra,ord,color="GrowthRateCat") + labs(color="Growth Rate")
ps_ra@sam_data$GrowthRateCat
subset_samples(ps_ra,!is.na(ps_ra@sam_data$GrowthRateCat))
ps_ra <- subset_samples(ps_ra,!is.na(ps_ra@sam_data$GrowthRateCat))
plot_ordination(ps_ra,ord,color="GrowthRateCat") + labs(color="Growth Rate")
ps_ra <- subset_samples(ps_ra,!is.na(ps_ra@sam_data$GrowthRateCat))
plot_ordination(ps_ra,ord,color="GrowthRateCat") + labs(color="Growth Rate")
ps_ra@sam_data$GrowthRateCat
ps_ra <- subset_samples(ps_ra,!is.na(ps_ra@sam_data$GrowthRateCat))
ord <- ordinate(ps_ra,method = "PCoA")
plot_ordination(ps_ra,ord,color="GrowthRateCat") + labs(color="Growth Rate")
plot_ordination(ps_ra,ord,color="GrowthRateCat") + labs(color="Growth Rate") + stat_ellipse()
plot_ordination(ps_ra,ord,color="GrowthRateCat") + labs(color="Growth Rate") + theme_bw()
ggsave("./output/figs/PCoA_GrowthRate.png",dpi=300, height = 8,width = 8)
bray.nmds <- monoMDS(bray)
stressplot(bray.nmds)
jaccard.nmds <- monoMDS(jaccard)
stressplot(jaccard.nmds)
# Build data frame
bray.x <- bray.nmds$points[,1]
bray.y <- bray.nmds$points[,2]
jaccard.x <- jaccard.nmds$points[,1]
jaccard.y <- jaccard.nmds$points[,2]
nmds <- data.frame(Bray.X = bray.x,Bray.Y=bray.y,Jaccard.X=jaccard.x,Jaccard.Y=jaccard.y)
nmds.df <- (cbind(meta,nmds))
# plot NMDS results
ggplot(nmds.df, aes(x=Bray.X,y=Bray.Y,color=Location)) +
geom_point()
ggplot(nmds.df, aes(x=Jaccard.X,y=Jaccard.Y,color=Location)) +
geom_point() + theme_bw()
ggplot(nmds.df, aes(x=Bray.X,y=Bray.Y,color=Location)) +
geom_point() + theme_bw()
ggplot(nmds.df, aes(x=Jaccard.X,y=Jaccard.Y,color=Location)) +
geom_point() + theme_bw()
ggplot(nmds.df, aes(x=Bray.X,y=Bray.Y,color=Location)) +
geom_point() + theme_bw()
ggsave("./output/figs/NMDS_Location_Bray.png",dpi=300,height = 8,width = 8)
perm.mod <- adonis(otu ~ meta$Location)
perm.mod
ig=make_network(ps_ra, max.dist = .9)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ig=make_network(ps_ra, max.dist = .8)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ps_ra <- readRDS("./output/phyloseq_cleaned_relabund.RDS")
ig=make_network(ps_ra, max.dist = .8)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ig=make_network(ps_ra, max.dist = .9)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ig=make_network(ps_ra, max.dist = .7)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ig=make_network(ps_ra, max.dist = .75)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ig=make_network(ps_ra, max.dist = .8)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ggsave("./Output/Network_Jaccard.png", dpi=300, height = 12, width = 18)
ggsave("./output/figs/Network_Jaccard.png", dpi=300, height = 12, width = 18)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2) + scale_color_manual(values=pal)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2) + scale_color_manual(values=pal)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2) + scale_color_manual(values=pal)
set.seed(123)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2) + scale_color_manual(values=pal)
set.seed(123)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2) + scale_color_manual(values=pal)
set.seed(123)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2) + scale_color_manual(values=pal)
set.seed(13)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2) + scale_color_manual(values=pal)
ggsave("./output/figs/Network_Jaccard.png", dpi=300, height = 12, width = 18)
ggplot(nmds.df, aes(x=Bray.X,y=Bray.Y,color=Location)) +
geom_point() + theme_bw() + scale_color_manual(values=pal)
ggplot(nmds.df, aes(x=Bray.X,y=Bray.Y,color=Location)) +
geom_point() + theme_bw()
set.seed(13)
plot_network(ig, physeq = ps_ra, color = "Location",label = NULL,point_size = 2)
ggsave("./output/figs/Network_Jaccard.png", dpi=300, height = 12, width = 18)
otu_table(ps)
rarecurve(otu_table(ps_ra),step = 20,label = FALSE)
decostand(otu_table(ps_ra),method="pa")
?decostand
decostand(otu_table(pa),method = "pa")
decostand(otu_table(ps_ra),method = "pa")
decostand(as(otu_table(ps_ra),"matrix"),method = "pa")
rarecurve(decostand(as(otu_table(ps_ra),"matrix"),method = "pa"),step = 20,label = FALSE)
rarecurve(otu)
ps <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
otu_raw = as(otu_table(ps),"matrix")
rarecurve(otu_raw)
rarecurve(otu_raw,label = FALSE,step = 500)
png("./output/figs/Rarefaction_Curve.png")
rarecurve(otu_raw,label = FALSE,step = 500)
dev.off()
library(microbiome)
det <- c(0, 0.1, 0.5, 2, 5, 20)/100
prevalences <- seq(.05, 1, .05)
plot_core(ps_ra, prevalences = prevalences, detections = det, plot.type = "lineplot") + xlab("Relative Abundance (%)")
plot_core(ps_ra, prevalences = prevalences, detections = det, plot.type = "lineplot") + xlab("Relative Abundance")
ggsave("./output/figs/CoreSize_vs_RelativeAbundance.png", dpi = 300)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
# Also define gray color palette
gray <- gray(seq(0,1,length=10))
p <- plot_core(ps_ra, plot.type = "heatmap", colours = gray,
prevalences = prevalences, detections = detections) +
xlab("Detection Threshold (Relative Abundance (%))")
print(p)
plot_core(ps_ra, plot.type = "heatmap", colours = gray,
prevalences = prevalences, detections = detections) +
xlab("Detection Threshold (Relative Abundance (%))")
?plot_core
prevalences <- seq(.05, .5, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
plot_core(ps_ra, plot.type = "heatmap", colours = gray,
prevalences = prevalences, detections = detections) +
xlab("Detection Threshold (Relative Abundance (%))")
names(ps_ra@otu_table)
colnames(ps_ra@otu_table)
length(colnames(ps_ra@otu_table))
paste0("ESV_",1:length(colnames(ps_ra@otu_table)))
colnames(ps_ra@otu_table) <- paste0("ESV_",1:length(colnames(ps_ra@otu_table)))
plot_core(ps_ra, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .1, horizontal = TRUE)
library(RColorBrewer)
plot_core(ps_ra, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .1, horizontal = TRUE)
ggsave("./output/figs/Core_Heatmap.png", dpi=300, height = 8,width = 12)
taxa_prevalence = (prevalence(ps_ra, detection = 0.001, sort = TRUE))
# core members at >= 0.2 sample prevalence 0.01% detection threshold
core.taxa.standard <- core_members(ps_ra, detection = 0.001, prevalence = .1)
core.taxa.standard
core.taxa.standard <- core_members(ps_ra, detection = 0.1, prevalence = .5)
core.taxa.standard
core.taxa.standard <- core_members(ps_ra, detection = 0.1, prevalence = .2)
core.taxa.standard
core.taxa.standard <- core_members(ps_ra, detection = 0.01, prevalence = .2)
core.taxa.standard
core.taxa.standard <- core_members(ps_ra, detection = 0.01, prevalence = .5)
core.taxa.standard
core.taxa.standard <- core_members(ps_ra, detection = 0.01, prevalence = .2)
core.taxa.standard
ps_core <- core(ps_ra, detection = 0.01, prevalence = .2)
ps_core <- core(ps_ra, detection = 0.01, prevalence = .1)
ps_core_samples = subset_samples(ps_core,rowSums(otu_table(ps_core)) > 0)
core.taxa.standard
ps_core_samples = subset_taxa(ps_ra, colnames(ps_ra) %in% core.taxa.standard)
core.taxa.standard
str_split(core.taxa.standard,"_")
map(str_split(core.taxa.standard,"_"),2)
purrr::map(str_split(core.taxa.standard,"_"),2)
unlist(purrr::map(str_split(core.taxa.standard,"_"),2))
as.numeric(unlist(purrr::map(str_split(core.taxa.standard,"_"),2)))
core.taxa.numbers <- as.numeric(unlist(purrr::map(str_split(core.taxa.standard,"_"),2)))
tax_table(ps_ra)
tax_table(ps_ra)[core.taxa.numbers,]
ps_ra@tax_table <- tax_table(ps_ra)[core.taxa.numbers,]
nmds_core = ordinate(ps_ra, "NMDS")
sample_data(ps_ra)
plot_ordination(ps_ra, nmds_core, color = "Location") +
stat_ellipse()
plot_ordination(ps_ra, nmds_core, color = "Genotype") +
stat_ellipse()
plot_ordination(ps_ra, nmds_core, color = "CoralAgeBinned") +
stat_ellipse()
plot_ordination(ps_ra, nmds_core, color = "Location")
write.csv(ps_ra@tax_table, "./output/Core_Microbiome_Taxonomy.csv",quote = FALSE)
plot_bar2(ps_ra,fill="Family")
taxa_names(ps_ra)
taxa_names(ps_ra) <- core.taxa.standard
otu_table(ps_ra)[,core.taxa.numbers]
otu_table(ps_ra) <- otu_table(ps_ra)[,core.taxa.numbers]
taxa_names(ps_ra) <- otu_table(ps_ra)[,core.taxa.numbers]
taxa_names(ps_ra) <- core.taxa.standard
taxa_names(ps_ra)
ps_ra <- readRDS("./output/phyloseq_cleaned_relabund.RDS")
taxa_names(ps_ra)
taxa_names(ps_ra)[core.taxa.numbers]
subset_taxa(ps_ra, taxa_names(ps_ra) %in% taxa_names(ps_ra)[core.taxa.numbers])
ps_core <- subset_taxa(ps_ra, taxa_names(ps_ra) %in% taxa_names(ps_ra)[core.taxa.numbers])
write.csv(ps_core@tax_table, "./output/Core_Microbiome_Taxonomy.csv",quote = FALSE)
plot_bar2(ps_core,fill="Family")
merge_samples(ps_core,"Location")
psm_core <- merge_samples(ps_core,"Location")
psm_core@sam_data
row.names(psm_core@sam_data)
psm_core@sam_data$Location <- row.names(psm_core@sam_data)
# Barplot
plot_bar2(psm_core,fill="Family")
plot_bar2(psm_core,fill="Family") +
theme(axis.text.x = element_text(angle=180))
plot_bar2(psm_core,fill="Family") +
theme(axis.text.x = element_text(angle=270))
plot_bar2(psm_core,fill="Family") +
theme(axis.text.x = element_text(angle=90))
plot_bar2(psm_core,fill="Family") +
theme(axis.text.x = element_text(angle=90,vjust = 0))
plot_bar2(psm_core,fill="Family") +
theme(axis.text.x = element_text(angle=90,vjust = -0.1))
plot_bar2(psm_core,fill="Family") +
theme(axis.text.x = element_text(angle=90,vjust = -1))
plot_bar2(psm_core,fill="Family") +
theme(axis.text.x = element_text(angle=90,hjust = -1))
plot_bar2(psm_core,fill="Family") +
theme(axis.text.x = element_text(angle=90,hjust = -.1))
plot_bar2(psm_core,fill="Family") +
theme(axis.text.x = element_text(angle=90,hjust = -.01))
plot_bar2(psm_core,fill="Family") +
theme(axis.text.x = element_text(angle=90,hjust = -.01,vjust=0))
core.taxa.standard <- core_members(ps, detection = 0.01, prevalence = .2)
core.taxa.numbers <- as.numeric(unlist(purrr::map(str_split(core.taxa.standard,"_"),2)))
# subset to only samples containing core microbiome
ps_core <- subset_taxa(ps, taxa_names(ps) %in% taxa_names(ps)[core.taxa.numbers])
core.taxa.standard <- core_members(ps, detection = 0.01, prevalence = .2)
core.taxa.numbers <- as.numeric(unlist(purrr::map(str_split(core.taxa.standard,"_"),2)))
# subset to only samples containing core microbiome
ps_core <- subset_taxa(ps, taxa_names(ps) %in% taxa_names(ps)[core.taxa.numbers])
core.taxa.standard <- core_members(ps_ra, detection = 0.01, prevalence = .2)
core.taxa.numbers <- as.numeric(unlist(purrr::map(str_split(core.taxa.standard,"_"),2)))
# subset to only samples containing core microbiome
ps_core <- subset_taxa(ps_ra, taxa_names(ps_ra) %in% taxa_names(ps_ra)[core.taxa.numbers])
core.taxa.standard <- core_members(ps_ra, detection = 0.01, prevalence = .2)
ps_ra <- readRDS("./output/phyloseq_cleaned_relabund.RDS")
core.taxa.standard <- core_members(ps_ra, detection = 0.01, prevalence = .2)
core.taxa.numbers <- as.numeric(unlist(purrr::map(str_split(core.taxa.standard,"_"),2)))
# subset to only samples containing core microbiome
ps_core <- subset_taxa(ps_ra, taxa_names(ps_ra) %in% taxa_names(ps_ra)[core.taxa.numbers])
taxa_names(ps_ra)[core.taxa.numbers]
core.taxa.standard <- core_members(ps_ra, detection = 0.01, prevalence = .2)
core.taxa.numbers <- as.numeric(unlist(purrr::map(str_split(core.taxa.standard,"_"),2)))
core.taxa.numbers
core.taxa.standard
ps_core <- subset_taxa(ps_ra, taxa_names(ps_ra) %in% taxa_names(ps_ra)[core.taxa.standard])
core.taxa.standard <- core_members(ps, detection = 0.01, prevalence = .2)
core.taxa.numbers <- as.numeric(unlist(purrr::map(str_split(core.taxa.standard,"_"),2)))
# subset to only samples containing core microbiome
ps_core <- subset_taxa(ps, taxa_names(ps) %in% core.taxa.standard)
core.taxa.standard
ps_core <- subset_taxa(ps, taxa_names(ps) %in% core.taxa.standard)
write.csv(ps_core@tax_table, "./output/Core_Microbiome_Taxonomy.csv",quote = FALSE)
# Merge core phyloseq by Location
psm_core <- merge_samples(ps_core,"Location")
psm_core
psm_core@sam_data$Location <- row.names(psm_core@sam_data)
# Barplot
transform_sample_counts(psm_core, function(x) x / sum(x))
psm_core_ra <- transform_sample_counts(psm_core, function(x) x / sum(x))
plot_bar2(psm_core_ra,fill="Family") +
theme(axis.text.x = element_text(angle=90,hjust = -.01))
plot_bar2(psm_core_ra,fill="Phylum") +
theme(axis.text.x = element_text(angle=90,hjust = -.01))
plot_bar2(psm_core_ra,fill="Phylum") +
theme(axis.text.x = element_text(angle=90,hjust = -.01),
axis.title = element_text(face="bold",size=12),
legend.title = element_text(size=12,face="bold"))
plot_bar2(psm_core_ra,fill="Phylum") +
theme(axis.text.x = element_text(angle=90,hjust = -.01),
axis.title = element_text(face="bold",size=12),
legend.title = element_text(size=12,face="bold"),
axis.title.x = element_text(vjust = 1))
plot_bar2(psm_core_ra,fill="Phylum") +
theme(axis.text.x = element_text(angle=90,hjust = -.01),
axis.title = element_text(face="bold",size=12),
legend.title = element_text(size=12,face="bold"),
axis.title.x = element_text(hjust = 1))
plot_bar2(psm_core_ra,fill="Phylum") +
theme(axis.text.x = element_text(angle=90,hjust = -.01),
axis.title = element_text(face="bold",size=12),
legend.title = element_text(size=12,face="bold"),
axis.title.x = element_text(vjust = -1))
# Barplot
plot_bar2(psm_core_ra,fill="Phylum") +
theme(axis.text.x = element_text(angle=90,hjust = -.01),
axis.title = element_text(face="bold",size=12),
legend.title = element_text(size=12,face="bold"),
axis.title.x = element_text(vjust = -2))
# Barplot
plot_bar2(psm_core_ra,fill="Phylum") +
theme(axis.text.x = element_text(angle=90,hjust = -.01),
axis.title = element_text(face="bold",size=12),
legend.title = element_text(size=12,face="bold"),
axis.title.x = element_text(vjust = -1.5))
ggsave("./output/figs/Core_Microbiome_Phylum-Level_by_Location.png", dpi=300, width = 10,height = 8)
nmds_core = ordinate(psm_core_ra, "NMDS")
plot_ordination(ps_ra, nmds_core, color = "Location") +
labs(title = "Core bacterial community")
sample_data(psm_core_ra)
plot_ordination(psm_core_ra, nmds_core, color = "Location") +
labs(title = "Core bacterial community")
df = read.csv("~/Desktop/UVU/Research/CRFS_Cacti/Data_for_Report.csv")
ggplot(df, aes(x=as.date(SamplingDate),y=Mortality_Disease) + geom_point()
ggplot(df, aes(x=as.date(SamplingDate),y=Mortality_Disease) + geom_point()
ggplot(df, aes(x=as.date(SamplingDate),y=Mortality_Disease)) + geom_point()
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease)) + geom_point()
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_point()
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_boxplot()
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_violin()
t.test(df$Mortality_Disease,df$Treatment)
?t.test
t.test(df$Mortality_Disease[df$Treatment=="Control"],df$Mortality_Disease[df$Treatment=="Sampled"])
df = read.csv("~/Desktop/UVU/Research/CRFS_Cacti/Data_for_Report.csv")
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_violin()
t.test(df$Mortality_Disease[df$Treatment=="Control"],df$Mortality_Disease[df$Treatment=="Sampled"])
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_boxplot()
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_jitter()
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_jitter() + geom_smooth()
df$SamplingDate <- as.POSIXct(df$SamplingDate,format='%Y-%m-%d')
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_jitter() + geom_smooth()
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_jitter() + geom_smooth(fill="Blue")
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_jitter() + geom_smooth(alpha=.5)
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_jitter() + geom_smooth(fill=".5"LightBlue)
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_jitter() + geom_smooth(fill="LightBlue")
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_jitter() + geom_smooth()
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_jitter() + geom_smooth() +
labs(x="Sampling Date",y="Disease/Mortality",color= "Group")
mod = aov(data=df, Mortality_Disease ~ Treatment * SamplingDate)
summary(mod)
mod = aov(data=df, Mortality_Disease ~ Treatment + SamplingDate)
summary(mod)
mod
df = read.csv("~/Desktop/UVU/Research/CRFS_Cacti/Data_for_Report.csv")
df$SamplingDate <- as.POSIXct(df$SamplingDate,format='%Y-%m-%d')
ggplot(df, aes(x=(SamplingDate),y=Mortality_Disease,color=Treatment)) + geom_jitter() + geom_smooth() +
labs(x="Sampling Date",y="Disease/Mortality",color= "Group")
t.test(df$Mortality_Disease[df$Treatment=="Control"],df$Mortality_Disease[df$Treatment=="Sampled"])
mod = aov(data=df, Mortality_Disease ~ Treatment + SamplingDate)
summary(mod)
mod
library(phyloseq)
library(tidyverse)
# Load data ####
ps <- readRDS("./output/phyloseq_object_16S.RDS")
sample_date(ps)
sample_data(ps)
>>>>>>> 2a964a3cd0524693adfc7d3217c56aaa12c38bc9
