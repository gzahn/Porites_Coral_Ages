source("./R/comp_transform.R")
source("./R/comp_transform.R")
source("./test_compositional_function.R")
source("./test_compositional_function.R")
source("./test_compositional_function.R")
microbiome::transform()
microbiome::transform
source("./R/comp_transform.R")
pluteus2.rel <- comp_transform(pluteus2, "compositional")
source("./R/comp_transform.R")
pluteus2.rel <- comp_transform(pluteus2, "compositional")
comp_transform <- function (x, transform = "compositional", target = "OTU", shift = 0,
scale = 1)
{
y <- NULL
xorig <- x
if (class(x) == "phyloseq") {
x <- abundances(x)
}
if (!all(sample(round(prod(dim(abundances(x)))/10)))%%1 ==
0) {
warning("The OTU abundances are not integers. \n        Check that the OTU input data is given as original counts \n        to avoid transformation errors!")
}
if (min(sample_sums(otu_table(ps))) == 0) {
warning("At least one sample has no reads...cannot divide by zero!")
}
if (transform == "compositional") {
if (target == "OTU") {
xt <- apply(x, 2, function(x) {
log(x/sum(x) + (1/min(sample_sums(otu_table(ps)))))
})
}
}
}
xret <- xt
if (class(xorig) == "phyloseq") {
if (taxa_are_rows(xorig)) {
otu_table(xorig)@.Data <- xret
}
else {
otu_table(xorig)@.Data <- t(xret)
}
xret <- xorig
}
xret
#<environment: namespace:microbiome>
source("./R/comp_transform.R")
pluteus2.rel <- comp_transform(pluteus2, "compositional")
pluteus2.rel
plot(otu_table(pluteus2.rel))
plot(otu_table(pluteus2.rel)[,1])
otu_table(pluteus2.rel)
(otu_table(pluteus2.rel)[1,1])
(otu_table(ps)[1,1])
sum(otu_table(ps)[1,])
sample_sums(otu_table(ps))
min(sample_sums(otu_table(ps)))
2773/28040 + (1/1392)
log(2773/28040 + (1/1392))
(1/1392)
log(.1)
log10(.1)
log10(2773/28040 + (1/1392))
E(log10(.1))
e(log10(.1))
exp(log10(.1))
log10(.1)
exp(log(.1))
log(.21)
log10(.21)
pacuta2 <- tax_glom(pacuta,taxrank = rank_names(ps)[6])
pluteus2@otu_table[1,1]
log(x/sum(x) + (1/min(sample_sums(otu_table(ps)))))
log10(2773/28040 + (1/1392))
pluteus2.rel <- comp_transform(pluteus2, "clr")
otu_table(pluteus2.rel)[1,1]
install.packages("compositions")
compositions::clr
compositions::clr(otu_table(pluteus2.rel)[,1])
compositions::clr(otu_table(pluteus2.rel)[1,])
compositions::clr(otu_table(pluteus2.rel)[100,])
plot(compositions::clr(otu_table(pluteus2.rel)[100,]))
plot(compositions::clr(otu_table(pluteus2.rel)[1:100,1]))
otu_table(pluteus2.rel)[1:100,1]
otu_table(pluteus2)[1:100,1]
plot(compositions::clr(otu_table(pluteus2)[1:100,1]))
(compositions::clr(otu_table(pluteus2)[1:100,1]))
# --------------------------------------------------------------#
# Porites 16S Analyses - Depends on "01_Process_Raw_Reads.R"
# and "01_Cleanup_Processed_Data.R"
#
# Combine P luteus data with previously published P. acuta
# microbiome data from same sites - Define and investigate
# core bacterial microbiome of both host corals
#
# Author: Geoffrey Zahn
# --------------------------------------------------------------#
# Packages
library(phyloseq)
library(tidyverse)
library(vegan)
# library(devtools) # Load the devtools package
# install_github("microbiome/microbiome") # Install the package
library(microbiome)
library(RColorBrewer)
# functions
source("./R/plot_bar2.R")
# Load data ####
pluteus <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
pacuta <- readRDS("./output/Pacuta_phyloseq_object.Rds")
# fix column names
pacuta@sam_data$Location <- as.character(pacuta@sam_data$Island.Collected.From)
pacuta@sam_data$Library.ID <-  as.character(pacuta@sam_data$SampleName)
# Parse components for merging
pacuta.otu <- otu_table(pacuta)
pacuta.tax <- tax_table(pacuta)
pacuta.sam <- as(sample_data(pacuta), "data.frame")
pluteus.otu <- otu_table(pluteus)
pluteus.tax <- tax_table(pluteus)
pluteus.sam <- as(sample_data(pluteus),"data.frame")
# Merge phyloseq objects ####
ps <- merge_phyloseq(pluteus.otu,sample_data(pluteus.sam),pluteus.tax,pacuta.otu,sample_data(pacuta.sam),pacuta.tax)
# Fix metadata
ps@sam_data$Species[ps@sam_data$Species=="1"] <- "P acuta"
ggplot(mapping=aes(x=1:nrow(otu_table(ps)),y=rowSums(otu_table(ps)))) + geom_point(aes(color=ps@sam_data$Species)) +
labs(x="Sample number",y="Read count",color="Species") + theme_bw()
# Add read count to sampledata
sample_data(ps)$ReadDepth <- rowSums(otu_table(ps))
# Collapse based on taxonomy at genus level ####
ps2 = tax_glom(ps,taxrank = rank_names(ps)[6])
dev.off()
# --------------------------------------------------------------#
# Porites 16S Analyses - Depends on "01_Process_Raw_Reads.R"
# and "01_Cleanup_Processed_Data.R"
#
# Combine P luteus data with previously published P. acuta
# microbiome data from same sites - Define and investigate
# core bacterial microbiome of both host corals
#
# Author: Geoffrey Zahn
# --------------------------------------------------------------#
# Packages
library(phyloseq)
library(tidyverse)
library(vegan)
# library(devtools) # Load the devtools package
# install_github("microbiome/microbiome") # Install the package
library(microbiome)
library(RColorBrewer)
# functions
source("./R/plot_bar2.R")
# Load data ####
pluteus <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
pacuta <- readRDS("./output/Pacuta_phyloseq_object.Rds")
# fix column names
pacuta@sam_data$Location <- as.character(pacuta@sam_data$Island.Collected.From)
pacuta@sam_data$Library.ID <-  as.character(pacuta@sam_data$SampleName)
# Parse components for merging
pacuta.otu <- otu_table(pacuta)
pacuta.tax <- tax_table(pacuta)
pacuta.sam <- as(sample_data(pacuta), "data.frame")
pluteus.otu <- otu_table(pluteus)
pluteus.tax <- tax_table(pluteus)
pluteus.sam <- as(sample_data(pluteus),"data.frame")
# Merge phyloseq objects ####
ps <- merge_phyloseq(pluteus.otu,sample_data(pluteus.sam),pluteus.tax,pacuta.otu,sample_data(pacuta.sam),pacuta.tax)
# Fix metadata
ps@sam_data$Species[ps@sam_data$Species=="1"] <- "P acuta"
ggplot(mapping=aes(x=1:nrow(otu_table(ps)),y=rowSums(otu_table(ps)))) + geom_point(aes(color=ps@sam_data$Species)) +
labs(x="Sample number",y="Read count",color="Species") + theme_bw()
# Add read count to sampledata
sample_data(ps)$ReadDepth <- rowSums(otu_table(ps))
# Collapse based on taxonomy at genus level ####
ps2 = tax_glom(ps,taxrank = rank_names(ps)[6])
?tax_glom
# Remove low-abundance OTUs ####
# Look at taxa sums
summary(taxa_sums(ps2))
# Keep OTUs with at least 10 occurrances
ps.min <- subset_taxa(ps2, taxa_sums(ps2) >= 10)
# Ordination ####
ord1=ordinate(ps.min,method = "NMDS",color="Species")
plot_ordination(ps.min,ord1,color="Species") + stat_ellipse()
ggsave("./output/Pacuta_vs_Plutea_NMDSPlot_draft.png")
mds <- metaMDS(otu_table(ps.min))
stressplot(mds)
plot(nmds$points[,1])
mds1 <- nmds$points[,1]
mds2 <- nmds$points[,2]
ord.df <- data.frame(MDS1=mds1,MDS2=mds2,Location=sample_data(ps.min)$Location,HostSpecies=sample_data(ps.min)$Species)
ggplot(ord.df,aes(x=MDS1,y=MDS2,color=HostSpecies)) + geom_point() + stat_ellipse()
ord1 = ordinate(ps.min, method = "NMDS")
plot_ordination(ps.min,ord1,color="Species")
# Calculate distance matrix
comm.dist <- vegdist(otu_table(ps.min),method = "bray")
plot(comm.dist)
# Convert to presence-absence ####
ps_pa <- transform_sample_counts(ps.min, function(abund) 1*(abund>0))
# prepare data for heatmap and plot ####
pa = as(t(otu_table(ps_pa)),"matrix")
cols = plyr::mapvalues(ps_pa@sam_data$Species,from=unique(ps_pa@sam_data$Species),to=c("Blue","Red"))
heatmap(pa,Rowv = NA,ColSideColors = cols,Colv = NA)
# Blue = P lutea, Red = P acuta
heatmap(t(as.matrix(otu_table(ps_pa))),Rowv = NA,ColSideColors = cols,Colv = NA, labRow = NA, col = gray.colors(2))
# Find genera tha overlap between species of corals ####
Plutea.cols = grep("ABB",x = colnames(pa))
Pacuta.cols = grep("AOO",x = colnames(pa))
Plutea.matrix = pa[,Plutea.cols]
Pacuta.matrix = pa[,Pacuta.cols]
shared.genera = rowSums(Plutea.matrix) > 0 & rowSums(Pacuta.matrix) > 0
shared.genera = which(shared.genera == TRUE)
sink("./output/shared_Genera_Pactua-Plutea.txt")
ps_pa@tax_table[shared.genera,]
sink(NULL)
# Prep shared taxa data frame
shared.genera.names = c(ps_pa@tax_table[shared.genera,"Genus"])
shared.family.names = c(ps_pa@tax_table[shared.genera,"Family"])
shared.order.names = c(ps_pa@tax_table[shared.genera,"Order"])
shared.phylum.names = c(ps_pa@tax_table[shared.genera,"Phylum"])
df.shared.taxa <- data.frame(Genus = shared.genera.names,Family = shared.family.names,Order=shared.order.names,Phylum=shared.phylum.names)
# Bar plot, colored by phylum
ggplot(df.shared.taxa) + geom_bar(aes(x=reorder(Order,Order,function(x)-length(x)),fill=Phylum)) +
theme(axis.text.x = element_text(angle=90),
axis.title = element_text(face="bold")) +
labs(x="Order",y="Shared Count")
ggsave("./output/figs/Shared_Genera_Pacuta-Plutea_within_each-order.png",dpi=300)
# PermANOVA ####
mod1 <- adonis(otu_table(ps) ~ sample_data(ps)$Species + sample_data(ps)$ReadDepth)
mod1
# Core Microbiome(s) ####
pluteus # P. luteus ... this study
pacuta # P. acuta ... previous study
ps # Combined Pluteus and Pacuta
ps2 # combined and taxa merged to genus level
# Let's start with a heatmap of all genera relative abundance in full merged dataset
ps2_ra <- transform_sample_counts(ps2,function(x) x/sum(x))
cols = plyr::mapvalues(ps2@sam_data$Species,from=unique(ps2@sam_data$Species),to=c("Blue","Red"))
# Blue = P luteus, Red = P acuta
heatmap((as.matrix(otu_table(ps2_ra))),Rowv = NA,RowSideColors = cols,Colv = NA, labRow = NA, col = gray.colors(20),labCol = NA)
# ... Not very helpful...try to find the core of each host, then merge
# Compositional versions of the data sets, individually, and combined...
ps2.rel <- microbiome::transform(ps2, "clr")
head(prevalence(pseq.rel, detection = 0.01, sort = TRUE))
ps.rel <- microbiome::transform(ps, "clr")
pluteus.rel <- microbiome::transform(pluteus, "clr")
pacuta.rel <- microbiome::transform(pacuta, "clr")
# tax-glommed to genus level
pluteus2 <- tax_glom(pluteus,taxrank = rank_names(ps)[6])
pluteus2.rel <- comp_transform(pluteus2, "clr")
pacuta2 <- tax_glom(pacuta,taxrank = rank_names(ps)[6])
pacuta2.rel <- microbiome::transform(pacuta2, "clr")
# Examine core thresholds:
prevalences <- seq(.05, .5, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
# Investigate visually
plot_core(ps2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
ggsave("./output/figs/core_lineplot_thresholds_full.png")
plot_core(ps2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
?microbiome::transform
plot_core(ps2.rel, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .1, horizontal = TRUE) +
theme(axis.text.x = element_blank())
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
# --------------------------------------------------------------#
# Porites 16S Analyses - Depends on "01_Process_Raw_Reads.R"
# and "01_Cleanup_Processed_Data.R"
#
# Combine P luteus data with previously published P. acuta
# microbiome data from same sites - Define and investigate
# core bacterial microbiome of both host corals
#
# Author: Geoffrey Zahn
# --------------------------------------------------------------#
# Packages
library(phyloseq)
library(tidyverse)
library(vegan)
# library(devtools) # Load the devtools package
# install_github("microbiome/microbiome") # Install the package
library(microbiome)
library(RColorBrewer)
# functions
source("./R/plot_bar2.R")
# Load data ####
pluteus <- readRDS("./output/phyloseq_object_16S_cleaned.RDS")
pacuta <- readRDS("./output/Pacuta_phyloseq_object.Rds")
# fix column names
pacuta@sam_data$Location <- as.character(pacuta@sam_data$Island.Collected.From)
pacuta@sam_data$Library.ID <-  as.character(pacuta@sam_data$SampleName)
# Parse components for merging
pacuta.otu <- otu_table(pacuta)
pacuta.tax <- tax_table(pacuta)
pacuta.sam <- as(sample_data(pacuta), "data.frame")
pluteus.otu <- otu_table(pluteus)
pluteus.tax <- tax_table(pluteus)
pluteus.sam <- as(sample_data(pluteus),"data.frame")
# Merge phyloseq objects ####
ps <- merge_phyloseq(pluteus.otu,sample_data(pluteus.sam),pluteus.tax,pacuta.otu,sample_data(pacuta.sam),pacuta.tax)
# Fix metadata
ps@sam_data$Species[ps@sam_data$Species=="1"] <- "P acuta"
ggplot(mapping=aes(x=1:nrow(otu_table(ps)),y=rowSums(otu_table(ps)))) + geom_point(aes(color=ps@sam_data$Species)) +
labs(x="Sample number",y="Read count",color="Species") + theme_bw()
# Add read count to sampledata
sample_data(ps)$ReadDepth <- rowSums(otu_table(ps))
# Collapse based on taxonomy at genus level ####
ps2 = tax_glom(ps,taxrank = rank_names(ps)[6])
?tax_glom
# Remove low-abundance OTUs ####
# Look at taxa sums
summary(taxa_sums(ps2))
# Keep OTUs with at least 10 occurrances
ps.min <- subset_taxa(ps2, taxa_sums(ps2) >= 10)
# Ordination ####
ord1=ordinate(ps.min,method = "NMDS",color="Species")
plot_ordination(ps.min,ord1,color="Species") + stat_ellipse()
ggsave("./output/Pacuta_vs_Plutea_NMDSPlot_draft.png")
mds <- metaMDS(otu_table(ps.min))
stressplot(mds)
plot(nmds$points[,1])
mds1 <- nmds$points[,1]
mds2 <- nmds$points[,2]
ord.df <- data.frame(MDS1=mds1,MDS2=mds2,Location=sample_data(ps.min)$Location,HostSpecies=sample_data(ps.min)$Species)
ggplot(ord.df,aes(x=MDS1,y=MDS2,color=HostSpecies)) + geom_point() + stat_ellipse()
ord1 = ordinate(ps.min, method = "NMDS")
plot_ordination(ps.min,ord1,color="Species")
# Calculate distance matrix
comm.dist <- vegdist(otu_table(ps.min),method = "bray")
plot(comm.dist)
# Convert to presence-absence ####
ps_pa <- transform_sample_counts(ps.min, function(abund) 1*(abund>0))
# prepare data for heatmap and plot ####
pa = as(t(otu_table(ps_pa)),"matrix")
cols = plyr::mapvalues(ps_pa@sam_data$Species,from=unique(ps_pa@sam_data$Species),to=c("Blue","Red"))
heatmap(pa,Rowv = NA,ColSideColors = cols,Colv = NA)
# Blue = P lutea, Red = P acuta
heatmap(t(as.matrix(otu_table(ps_pa))),Rowv = NA,ColSideColors = cols,Colv = NA, labRow = NA, col = gray.colors(2))
# Find genera tha overlap between species of corals ####
Plutea.cols = grep("ABB",x = colnames(pa))
Pacuta.cols = grep("AOO",x = colnames(pa))
Plutea.matrix = pa[,Plutea.cols]
Pacuta.matrix = pa[,Pacuta.cols]
shared.genera = rowSums(Plutea.matrix) > 0 & rowSums(Pacuta.matrix) > 0
shared.genera = which(shared.genera == TRUE)
sink("./output/shared_Genera_Pactua-Plutea.txt")
ps_pa@tax_table[shared.genera,]
sink(NULL)
# Prep shared taxa data frame
shared.genera.names = c(ps_pa@tax_table[shared.genera,"Genus"])
shared.family.names = c(ps_pa@tax_table[shared.genera,"Family"])
shared.order.names = c(ps_pa@tax_table[shared.genera,"Order"])
shared.phylum.names = c(ps_pa@tax_table[shared.genera,"Phylum"])
df.shared.taxa <- data.frame(Genus = shared.genera.names,Family = shared.family.names,Order=shared.order.names,Phylum=shared.phylum.names)
# Bar plot, colored by phylum
ggplot(df.shared.taxa) + geom_bar(aes(x=reorder(Order,Order,function(x)-length(x)),fill=Phylum)) +
theme(axis.text.x = element_text(angle=90),
axis.title = element_text(face="bold")) +
labs(x="Order",y="Shared Count")
ggsave("./output/figs/Shared_Genera_Pacuta-Plutea_within_each-order.png",dpi=300)
# PermANOVA ####
mod1 <- adonis(otu_table(ps) ~ sample_data(ps)$Species + sample_data(ps)$ReadDepth)
mod1
# Core Microbiome(s) ####
pluteus # P. luteus ... this study
pacuta # P. acuta ... previous study
ps # Combined Pluteus and Pacuta
ps2 # combined and taxa merged to genus level
# Let's start with a heatmap of all genera relative abundance in full merged dataset
ps2_ra <- transform_sample_counts(ps2,function(x) x/sum(x))
cols = plyr::mapvalues(ps2@sam_data$Species,from=unique(ps2@sam_data$Species),to=c("Blue","Red"))
# Blue = P luteus, Red = P acuta
heatmap((as.matrix(otu_table(ps2_ra))),Rowv = NA,RowSideColors = cols,Colv = NA, labRow = NA, col = gray.colors(20),labCol = NA)
# ... Not very helpful...try to find the core of each host, then merge
# Compositional versions of the data sets, individually, and combined...
ps2.rel <- microbiome::transform(ps2, "clr")
head(prevalence(pseq.rel, detection = 0.01, sort = TRUE))
ps.rel <- microbiome::transform(ps, "compositional")
pluteus.rel <- microbiome::transform(pluteus, "compositional")
pacuta.rel <- microbiome::transform(pacuta, "compositional")
# tax-glommed to genus level
pluteus2 <- tax_glom(pluteus,taxrank = rank_names(ps)[6])
pluteus2.rel <- comp_transform(pluteus2, "compositional")
pacuta2 <- tax_glom(pacuta,taxrank = rank_names(ps)[6])
pacuta2.rel <- microbiome::transform(pacuta2, "compositional")
?microbiome::transform
# Examine core thresholds:
prevalences <- seq(.05, .5, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
# Investigate visually
plot_core(ps2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
ggsave("./output/figs/core_lineplot_thresholds_full.png")
plot_core(ps2.rel, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .1, horizontal = TRUE) +
theme(axis.text.x = element_blank())
ggsave("./output/figs/core_heatmap_thresholds_full.png", dpi=300)
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
source("./R/comp_transform.R")
pacuta2.rel <- comp_transform(pacuta2)
source("./R/comp_transform.R")
pacuta2.rel <- comp_transform(pacuta2)
prevalences <- seq(.05, .5, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
otu_table(pacuta2.rel)[,1]
plot(as.vector(otu_table(pacuta2.rel))
)
prevalences <- seq(.05, 8, .5)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "lineplot") + xlab("Relative Abundance (%)")
seq(.05, 8, .5)
detections
log10(.2)
10^seq(log10(1e-3)
)
seq(log10(1e-3), log10(.2), length = 10)
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "heatmap") + xlab("Relative Abundance (%)")
plot_core(pacuta2.rel, prevalences = prevalences, detections = detections, plot.type = "heatmap") + xlab("Relative Abundance (%)") +
theme(axis.text = element_blank())
ls
grep()
grep
?read.csv()
test1 <- c(1:5, "6,7", "8,9,10")
tf <- tempfile()
writeLines(test1, tf)
?help.doesn;texist
?help.doesntexist
read.csv()
?read.csv()
A = 3
2+       A
path <- "~/Desktop/Old_Stuff/Postdoc/Arabidopsis/Sequences/raw_fastqs/"
list.files(path)
# Parse fwd and rev reads
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
# Get Sample Names
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
plotQualityProfile(fnFs[c(1,2)]) # fwd reads
# -------------------------------------------------------------------#
# Porites 16S Analyses - Create phyloseq object from raw 16S reads
#
# Author: Geoffrey Zahn
# -------------------------------------------------------------------#
# Process Raw 16S reads ####
# Load packages ####
library(dada2); packageVersion("dada2")
library(vegan)
library(tidyverse)
library(phyloseq)
library(decontam)
# Find raw fastq files and prepare workspace ####
path <- "~/Desktop/Old_Stuff/Postdoc/Arabidopsis/Sequences/raw_fastqs/"
list.files(path)
# Parse fwd and rev reads
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
# Get Sample Names
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[c(1,2)]) # fwd reads
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
a = Sys.time()
a
elapsed = difftime(a,Sys.time())
elapsed
elapsed = difftime(Sys.time(),a)
elapsed
a = Sys.time()
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(260,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
# -------------------------------------------------------------------#
# Porites 16S Analyses - Create phyloseq object from raw 16S reads
#
# Author: Geoffrey Zahn
# -------------------------------------------------------------------#
# Process Raw 16S reads ####
# Load packages ####
library(dada2); packageVersion("dada2")
library(vegan)
library(tidyverse)
library(phyloseq)
library(decontam)
# Find raw fastq files and prepare workspace ####
path <- "~/Desktop/Old_Stuff/Postdoc/Arabidopsis/Sequences/raw_fastqs"
list.files(path)
# Parse fwd and rev reads
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
# Get Sample Names
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
# Peek at quality profiles
plotQualityProfile(fnFs[c(1,2)]) # fwd reads
plotQualityProfile(fnRs[c(1,2)]) # rev reads
# Make filtered outfile names
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
# Filter and trim ####
# cut fwd reads at 260 and rev reads at 200
a = Sys.time()
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(260,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
elapsed = difftime(Sys.time(),a)
elapsed
